{"version":3,"sources":["resources/resources.js","mixins/game.js","mixins/play.js","mixins/entities/cubeProjectile.js","mixins/entities/boostEntity.js","mixins/entities/boostTile.js","mixins/entities/carl.js","mixins/entities/cassetteProjectile.js","mixins/entities/gremlin.js","mixins/entities/HUD.js","mixins/entities/pacMan.js","mixins/entities/protonBeam.js","mixins/entities/player.js","mixins/entities/skeletor.js","mixins/entities/simon.js","mixins/entities/warpEntity.js","mixins/entities/slimer.js","mixins/sprites/al_logo.js","mixins/sprites/brad_start_sprite.js","mixins/sprites/jim_start_sprite.js","mixins/sprites/loading_sprite.js","mixins/sprites/start_text_sprite.js","App.js","reportWebVitals.js","index.js"],"names":["gameMixin","me","a","getGame","game","data","score","collisionTypes","BOOST","collision","types","USER","BOOSTTILE","WARP","video","init","parent","scale","scaleMethod","audio","loader","preload","gameResources","loaded","alert","texture","renderer","Texture","getJSON","getImage","state","set","PLAY","PlayScreen","pool","register","PlayerEntity","CubeProjectile","CassetteProjectile","PacManEntity","ProtonBeam","SimonEntity","SlimerContainer","SlimerEntity","CarlEntity","GremlinEntity","SkeletorEntity","WarpEntity","BoostEntity","BoostTile","JimStartSprite","BradStartSprite","StartTextSprite","ALLogo","LoadingSprite","input","bindKey","KEY","LEFT","RIGHT","DOWN","X","UP","SPACE","change","window","extendedGame","playMixin","getPlayScreen","Stage","extend","onResetEvent","levelDirector","loadLevel","onDestroyEvent","mainPlayerMixin","getMainPlayer","Entity","x","y","settings","this","_super","renderable","createAnimationFromName","anchorPoint","body","setVelocity","collisionType","PROJECTILE_OBJECT","pos","z","alwaysUpdate","update","dt","vel","height","world","removeChild","check","onCollision","res","other","name","hurt","width","topLine","Line","Vector2d","rightLine","bottomLine","leftLine","shapes","addShape","response","dir","maxVel","facingLeft","runSpeed","force","boostedDir","jumping","boostedVerticalSpeed","offTile","onTile","addAnimation","setCurrentAnimation","isCurrentAnimation","startX","starty","setMaxVelocity","ENEMY_OBJECT","setFriction","isMovingEnemy","rolling","center","roll","_this","timer","setInterval","flipX","alive","onDeactivateEvent","clearInterval","overlapV","falling","isFlickering","setCollisionMask","NO_OBJECT","tint","setColor","self","flicker","startY","random","Math","rotate","flip","region","image","entity_texture_1","framewidth","inViewport","setTimeout","addChild","pull","HUD","UIContainer","Container","isPersistent","floating","Infinity","ScoreItem","AudioControl","device","isMobile","FSControl","GUI_Object","setOpacity","onOver","onOut","onClick","isFullscreen","exitFullscreen","requestFullscreen","isMute","unmuteAll","setRegion","getRegion","muteAll","Renderable","relative","viewport","font","BitmapText","textAlign","textBaseline","event","subscribe","CANVAS_ONRESIZE","w","h","add","bind","draw","containerWidth","containerHeight","shoot","setAnimationFrame","Object","assign","jumpSpeed","jumpForce","boostedHorizontalSpeed","isWarping","crouching","follow","AXIS","BOTH","delay","isKeyPressed","WORLD_SHAPE","tick","sprite","canFade","warpTo","level","fadeIn","getCurrentAnimationFrame","to","play","maxSpeed","velX","velY","beamSettings","changeDirection","ignoreGravity","Sprite","ease","triggerKeyEvent","jim","getChildByName","brad","fade","App","useEffect","playerMixin","cubeProjectileMixin","boostEntityMixin","boostTileMixin","carlMixin","cassetteProjectileMixin","gremlinMixin","HUDMixin","pacManMixin","protonBeamMixin","skeletorMixin","simonMixin","warpEntityMixin","slimerMixin","logoMixin","bradMixin","jimMixin","loadingMixin","startTextMixin","onload","onReady","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e14ad58f.chunk.js","sourcesContent":["export default [\r\n    {\r\n        \"name\": \"surrender_fadein\",\r\n        \"type\": \"audio\",\r\n        \"src\": \"data/bgm/\"\r\n    },\r\n    {\r\n        \"name\": \"surrender_intro\",\r\n        \"type\": \"audio\",\r\n        \"src\": \"data/bgm/\"\r\n    },\r\n    {\r\n        \"name\": \"surrender\",\r\n        \"type\": \"audio\",\r\n        \"src\": \"data/bgm/\"\r\n    },\r\n    {\r\n        \"name\": \"block_explosion\",\r\n        \"type\": \"audio\",\r\n        \"src\": \"data/sfx/\"\r\n    },\r\n    {\r\n        \"name\": \"cassett_toss\",\r\n        \"type\": \"audio\",\r\n        \"src\": \"data/sfx/\"\r\n    },\r\n    {\r\n        \"name\": \"cool_bloop\",\r\n        \"type\": \"audio\",\r\n        \"src\": \"data/sfx/\"\r\n    },\r\n    {\r\n        \"name\": \"doyoyoying\",\r\n        \"type\": \"audio\",\r\n        \"src\": \"data/sfx/\"\r\n    },\r\n    {\r\n        \"name\": \"fart_squish\",\r\n        \"type\": \"audio\",\r\n        \"src\": \"data/sfx/\"\r\n    },\r\n    {\r\n        \"name\": \"phonebooth\",\r\n        \"type\": \"audio\",\r\n        \"src\": \"data/sfx/\"\r\n    },\r\n    {\r\n        \"name\": \"shadedDark01\",\r\n        \"type\": \"image\",\r\n        \"src\": \"data/img/assets/UI/shadedDark01.png\"\r\n    },\r\n    {\r\n        \"name\": \"shadedDark07\",\r\n        \"type\": \"image\",\r\n        \"src\": \"data/img/assets/UI/shadedDark07.png\"\r\n    },\r\n    {\r\n        \"name\": \"shadedDark13\",\r\n        \"type\": \"image\",\r\n        \"src\": \"data/img/assets/UI/shadedDark13.png\"\r\n    },\r\n    {\r\n        \"name\": \"shadedDark15\",\r\n        \"type\": \"image\",\r\n        \"src\": \"data/img/assets/UI/shadedDark15.png\"\r\n    },\r\n    {\r\n        \"name\": \"shadedDark30\",\r\n        \"type\": \"image\",\r\n        \"src\": \"data/img/assets/UI/shadedDark30.png\"\r\n    },\r\n    {\r\n        \"name\": \"shadedDark36\",\r\n        \"type\": \"image\",\r\n        \"src\": \"data/img/assets/UI/shadedDark36.png\"\r\n    },\r\n    {\r\n        \"name\": \"background\",\r\n        \"type\": \"image\",\r\n        \"src\": \"data/img/background.png\"\r\n    },\r\n    {\r\n        \"name\": \"BOOST_DOWN_DARK\",\r\n        \"type\": \"image\",\r\n        \"src\": \"data/img/BOOST_DOWN_DARK.png\"\r\n    },\r\n    {\r\n        \"name\": \"BOOST_DOWN\",\r\n        \"type\": \"image\",\r\n        \"src\": \"data/img/BOOST_DOWN.png\"\r\n    },\r\n    {\r\n        \"name\": \"BOOST_LEFT_DARK\",\r\n        \"type\": \"image\",\r\n        \"src\": \"data/img/BOOST_LEFT_DARK.png\"\r\n    },\r\n    {\r\n        \"name\": \"BOOST_LEFT\",\r\n        \"type\": \"image\",\r\n        \"src\": \"data/img/BOOST_LEFT.png\"\r\n    },\r\n    {\r\n        \"name\": \"BOOST_RIGHT_DARK\",\r\n        \"type\": \"image\",\r\n        \"src\": \"data/img/BOOST_RIGHT_DARK.png\"\r\n    },\r\n    {\r\n        \"name\": \"BOOST_RIGHT\",\r\n        \"type\": \"image\",\r\n        \"src\": \"data/img/BOOST_RIGHT.png\"\r\n    },\r\n    {\r\n        \"name\": \"BOOST_UP_DARK\",\r\n        \"type\": \"image\",\r\n        \"src\": \"data/img/BOOST_UP_DARK.png\"\r\n    },\r\n    {\r\n        \"name\": \"BOOST_UP\",\r\n        \"type\": \"image\",\r\n        \"src\": \"data/img/BOOST_UP.png\"\r\n    },\r\n    {\r\n        \"name\": \"clouds\",\r\n        \"type\": \"image\",\r\n        \"src\": \"data/img/clouds.png\"\r\n    },\r\n    {\r\n        \"name\": \"PressStart2P\",\r\n        \"type\": \"image\",\r\n        \"src\": \"data/img/fnt/PressStart2P.png\"\r\n    },\r\n    {\r\n        \"name\": \"brad_start_sprite\",\r\n        \"type\": \"image\",\r\n        \"src\": \"data/img/gui/brad_start_sprite.png\"\r\n    },\r\n    {\r\n        \"name\": \"jim_sprite\",\r\n        \"type\": \"image\",\r\n        \"src\": \"data/img/gui/jim_sprite.png\"\r\n    },\r\n    {\r\n        \"name\": \"load_bg\",\r\n        \"type\": \"image\",\r\n        \"src\": \"data/img/gui/load_bg.png\"\r\n    },\r\n    {\r\n        \"name\": \"short_trees\",\r\n        \"type\": \"image\",\r\n        \"src\": \"data/img/gui/short_trees.png\"\r\n    },\r\n    {\r\n        \"name\": \"start_text_sprite\",\r\n        \"type\": \"image\",\r\n        \"src\": \"data/img/gui/start_text_sprite.png\"\r\n    },\r\n    {\r\n        \"name\": \"tall_trees\",\r\n        \"type\": \"image\",\r\n        \"src\": \"data/img/gui/tall_trees.png\"\r\n    },\r\n    {\r\n        \"name\": \"title_screen\",\r\n        \"type\": \"image\",\r\n        \"src\": \"data/img/gui/title_screen.png\"\r\n    },\r\n    {\r\n        \"name\": \"area_01_tielset\",\r\n        \"type\": \"image\",\r\n        \"src\": \"data/img/map/area_01_tielset.png\"\r\n    },\r\n    {\r\n        \"name\": \"Neon-City-With-Overlays_0000_FG\",\r\n        \"type\": \"image\",\r\n        \"src\": \"data/img/Neon-City-With-Overlays_0000_FG.png\"\r\n    },\r\n    {\r\n        \"name\": \"Neon-City-With-Overlays_0002_MG\",\r\n        \"type\": \"image\",\r\n        \"src\": \"data/img/Neon-City-With-Overlays_0002_MG.png\"\r\n    },\r\n    {\r\n        \"name\": \"Neon-City-With-Overlays_0003_BG\",\r\n        \"type\": \"image\",\r\n        \"src\": \"data/img/Neon-City-With-Overlays_0003_BG.png\"\r\n    },\r\n    {\r\n        \"name\": \"al_logo\",\r\n        \"type\": \"image\",\r\n        \"src\": \"data/img/sprite/al_logo.png\"\r\n    },\r\n    {\r\n        \"name\": \"carl\",\r\n        \"type\": \"image\",\r\n        \"src\": \"data/img/sprite/carl.png\"\r\n    },\r\n    {\r\n        \"name\": \"cassette\",\r\n        \"type\": \"image\",\r\n        \"src\": \"data/img/sprite/cassette.png\"\r\n    },\r\n    {\r\n        \"name\": \"cube\",\r\n        \"type\": \"image\",\r\n        \"src\": \"data/img/sprite/cube.png\"\r\n    },\r\n    {\r\n        \"name\": \"gremlin\",\r\n        \"type\": \"image\",\r\n        \"src\": \"data/img/sprite/gremlin.png\"\r\n    },\r\n    {\r\n        \"name\": \"gripe_run_right\",\r\n        \"type\": \"image\",\r\n        \"src\": \"data/img/sprite/gripe_run_right.png\"\r\n    },\r\n    {\r\n        \"name\": \"jim_start_sprite\",\r\n        \"type\": \"image\",\r\n        \"src\": \"data/img/sprite/jim_start_sprite.png\"\r\n    },\r\n    {\r\n        \"name\": \"loading_sprite\",\r\n        \"type\": \"image\",\r\n        \"src\": \"data/img/sprite/loading_sprite.png\"\r\n    },\r\n    {\r\n        \"name\": \"phonebooth\",\r\n        \"type\": \"image\",\r\n        \"src\": \"data/img/sprite/phonebooth.png\"\r\n    },\r\n    {\r\n        \"name\": \"protonbeam\",\r\n        \"type\": \"image\",\r\n        \"src\": \"data/img/sprite/protonbeam.png\"\r\n    },\r\n    {\r\n        \"name\": \"simon\",\r\n        \"type\": \"image\",\r\n        \"src\": \"data/img/sprite/simon.png\"\r\n    },\r\n    {\r\n        \"name\": \"slimer\",\r\n        \"type\": \"image\",\r\n        \"src\": \"data/img/sprite/slimer.png\"\r\n    },\r\n    {\r\n        \"name\": \"spinning_coin_gold\",\r\n        \"type\": \"image\",\r\n        \"src\": \"data/img/sprite/spinning_coin_gold.png\"\r\n    },\r\n    {\r\n        \"name\": \"wheelie_right\",\r\n        \"type\": \"image\",\r\n        \"src\": \"data/img/sprite/wheelie_right.png\"\r\n    },\r\n    {\r\n        \"name\": \"texture\",\r\n        \"type\": \"image\",\r\n        \"src\": \"data/img/texture.png\"\r\n    },\r\n    {\r\n        \"name\": \"PressStart2P\",\r\n        \"type\": \"binary\",\r\n        \"src\": \"data/img/fnt/PressStart2P.fnt\"\r\n    },\r\n    {\r\n        \"name\": \"texture\",\r\n        \"type\": \"json\",\r\n        \"src\": \"data/img/texture.json\"\r\n    },\r\n    {\r\n        \"name\": \"area01\",\r\n        \"type\": \"tmx\",\r\n        \"src\": \"data/map/area01.tmx\"\r\n    },\r\n    {\r\n        \"name\": \"area02\",\r\n        \"type\": \"tmx\",\r\n        \"src\": \"data/map/area02.tmx\"\r\n    },\r\n    {\r\n        \"name\": \"loading_screen\",\r\n        \"type\": \"tmx\",\r\n        \"src\": \"data/map/loading_screen.tmx\"\r\n    },\r\n    {\r\n        \"name\": \"title_screen\",\r\n        \"type\": \"tmx\",\r\n        \"src\": \"data/map/title_screen.tmx\"\r\n    },\r\n    {\r\n        \"name\": \"area_01_tileset\",\r\n        \"type\": \"tsx\",\r\n        \"src\": \"data/map/area_01_tileset.tsx\"\r\n    }\r\n];","import gameResources from '../resources/resources'\r\nconst gameMixin = async (me) => {\r\n    const getGame = async () => {\r\n        const game = {\r\n\r\n            // an object where to store game information\r\n            data: {\r\n                // score\r\n                score: 0\r\n            },\r\n            collisionTypes: {\r\n                BOOST: me.collision.types.USER << 0,\r\n                BOOSTTILE: me.collision.types.USER << 1,\r\n                WARP: me.collision.types.USER << 2,\r\n            },\r\n            // Run on page load.\r\n            \"onload\": () => {\r\n                // Initialize the video.\r\n                if (!me.video.init(1920, 1080, { parent: \"screen\", scale: \"auto\", scaleMethod: \"flex-width\" })) {\r\n                    alert(\"Your browser does not support HTML5 canvas.\");\r\n                    return;\r\n                }\r\n\r\n                // Initialize the audio.\r\n                me.audio.init(\"webm, mp3\");\r\n\r\n                // set and load all resources.\r\n                // (this will also automatically switch to the loading screen)\r\n                me.loader.preload(gameResources, loaded);\r\n            },\r\n        }\r\n        const loaded = () => {\r\n\r\n\r\n            game.texture = new me.video.renderer.Texture(\r\n                me.loader.getJSON(\"texture\"),\r\n                me.loader.getImage(\"texture\")\r\n            );\r\n            // set the \"Play/Ingame\" Screen Object\r\n            me.state.set(me.state.PLAY, new game.PlayScreen());\r\n\r\n            // register our player entity in the object pool\r\n            me.pool.register(\"mainPlayer\", game.PlayerEntity);\r\n            me.pool.register(\"cubeProjectile\", game.CubeProjectile);\r\n            me.pool.register(\"cassetteProjectile\", game.CassetteProjectile);\r\n            me.pool.register(\"pacMan\", game.PacManEntity);\r\n            me.pool.register(\"protonBeam\", game.ProtonBeam);\r\n            me.pool.register(\"simon\", game.SimonEntity);\r\n            me.pool.register(\"slimer\", game.SlimerContainer);\r\n            me.pool.register(\"slimerEntity\", game.SlimerEntity);\r\n            me.pool.register(\"carl\", game.CarlEntity);\r\n            me.pool.register(\"gremlin\", game.GremlinEntity);\r\n            me.pool.register(\"skeletor\", game.SkeletorEntity);\r\n            me.pool.register(\"warpEntity\", game.WarpEntity);\r\n            me.pool.register(\"boostEntity\", game.BoostEntity);\r\n            me.pool.register(\"boostTile\", game.BoostTile, true);\r\n\r\n            // // title screen sprites\r\n            me.pool.register(\"jim_start_sprite\", game.JimStartSprite);\r\n            me.pool.register(\"brad_start_sprite\", game.BradStartSprite);\r\n            me.pool.register(\"start_text_sprite\", game.StartTextSprite);\r\n            me.pool.register(\"al_logo\", game.ALLogo);\r\n            me.pool.register(\"loading_sprite\", game.LoadingSprite);\r\n\r\n            // enable the keyboard\r\n            me.input.bindKey(me.input.KEY.LEFT, \"left\");\r\n            me.input.bindKey(me.input.KEY.RIGHT, \"right\");\r\n            me.input.bindKey(me.input.KEY.DOWN, \"down\");\r\n            // map X, Up Arrow and Space for jump\r\n            me.input.bindKey(me.input.KEY.X, \"jump\", false);\r\n            me.input.bindKey(me.input.KEY.UP, \"jump\", false);\r\n            me.input.bindKey(me.input.KEY.SPACE, \"jump\", false);\r\n            //attack\r\n            me.input.bindKey(me.input.KEY.SPACE, \"attack\", true);\r\n            // start the game\r\n            me.state.change(me.state.PLAY);\r\n\r\n        };\r\n        window.game = game\r\n        return game\r\n    }\r\n    const extendedGame = await getGame()\r\n    return extendedGame\r\n}\r\nexport default gameMixin\r\n\r\n // async hook snippet\r\n//  const game = (me, game) => {\r\n//     const getGame = async () => {\r\n\r\n\r\n//     }\r\n//     const extendedGame = await getGame()\r\n\r\n//     return extendedGame\r\n// }\r\n// export default game","\r\nconst playMixin = async (me, game) => {\r\n    const getPlayScreen = async () => {\r\n        game.PlayScreen = me.Stage.extend({\r\n            /**\r\n             *  action to perform on state change\r\n             */\r\n            onResetEvent: function () {\r\n                // load a level\r\n                me.levelDirector.loadLevel(\"area01\");\r\n                // me.audio.play(\"surrender\");\r\n\r\n                // reset the score\r\n                game.data.score = 0;\r\n\r\n                // // add our HUD to the game world\r\n                // if (typeof this.HUD === \"undefined\") {\r\n                //     this.HUD = new game.HUD.UIContainer();\r\n                // }\r\n                // me.game.world.addChild(this.HUD);\r\n\r\n                // // display if debugPanel is enabled or on mobile\r\n                // if ((me.plugins.debugPanel && me.plugins.debugPanel.panel.visible) || me.device.touch) {\r\n                //     if (typeof this.virtualJoypad === \"undefined\") {\r\n                //         this.virtualJoypad = new game.HUD.VirtualJoypad();\r\n                //     }\r\n                //     me.game.world.addChild(this.virtualJoypad);\r\n                // }\r\n            },\r\n\r\n            /**\r\n             *  action to perform when leaving this screen (state change)\r\n             */\r\n            onDestroyEvent: function () {\r\n                // remove the HUD from the game world\r\n                // me.game.world.removeChild(this.HUD);\r\n            }\r\n        });\r\n\r\n\r\n    }\r\n    const extendedGame = await getPlayScreen()\r\n\r\n    return extendedGame\r\n}\r\nexport default playMixin","const mainPlayerMixin = async (me, game) => {\r\n    const getMainPlayer = async () => {\r\n        game.CubeProjectile = me.Entity.extend({\r\n\r\n            init: function (x, y, settings) {\r\n\r\n\r\n                this._super(me.Entity, \"init\", [settings.x, settings.y, settings]);\r\n                // this.body.addShape(new me.Rect(x, y, this.width, this.height));\r\n                this.renderable = game.texture.createAnimationFromName([\r\n                    \"cube-0\", \"cube-1\", \"cube-2\",\r\n                    \"cube-3\",\r\n                ]);\r\n                this.anchorPoint.set(0.5, 0.5);\r\n                this.body.setVelocity(30, 0);\r\n                this.body.collisionType = me.collision.types.PROJECTILE_OBJECT;\r\n                this.pos.z = 8;\r\n                this.alwaysUpdate = true;\r\n            },\r\n\r\n            update: function (dt) {\r\n                // this.body.vel.x -= this.body.accel.x * dt / 1000;\r\n\r\n                this.body.vel.x = -10;\r\n                if (this.pos.x + this.height <= 0) {\r\n                    me.game.world.removeChild(this);\r\n                }\r\n\r\n                this.body.update();\r\n                me.collision.check(this);\r\n\r\n                return (this._super(me.Entity, 'update', [dt]) || this.body.vel.x !== 0 || this.body.vel.y !== 0);\r\n            },\r\n            onCollision: function (res, other) {\r\n                other.name == \"mainPlayer\" && other.hurt();\r\n                me.game.world.removeChild(this);\r\n            }\r\n        });\r\n\r\n        game.CubeProjectile.width = 21;\r\n        game.CubeProjectile.height = 21;\r\n    }\r\n    const extendedGame = await getMainPlayer()\r\n\r\n    return extendedGame\r\n}\r\nexport default mainPlayerMixin","const mainPlayerMixin = async (me, game) => {\r\n    const getMainPlayer = async () => {\r\n        game.BoostEntity = me.Entity.extend({\r\n            /**\r\n             * constructor\r\n             */\r\n            init: function (x, y, settings) {\r\n\r\n                this.topLine = new me.Line(0, 0, [\r\n                    new me.Vector2d(0, 0),\r\n                    new me.Vector2d(settings.width, 0)\r\n                ]);\r\n                this.rightLine = new me.Line(0, 0, [\r\n                    new me.Vector2d(settings.width, 0),\r\n                    new me.Vector2d(settings.width, settings.height)\r\n                ]);\r\n                this.bottomLine = new me.Line(0, 0, [\r\n                    new me.Vector2d(0, settings.height),\r\n                    new me.Vector2d(settings.width, settings.height)\r\n                ]);\r\n                this.leftLine = new me.Line(0, 0, [\r\n                    new me.Vector2d(0, 0),\r\n                    new me.Vector2d(0, settings.height)\r\n                ]);\r\n\r\n                //replace default rectangle with topLine\r\n                settings.shapes[0] = this.topLine\r\n                this._super(me.Entity, 'init', [x, y, settings]);\r\n\r\n                // add collision lines for left right bottom\r\n                this.body.addShape(this.rightLine);\r\n                this.body.addShape(this.bottomLine);\r\n                this.body.addShape(this.leftLine);\r\n\r\n                this.settings = settings;\r\n                // set the collision type\r\n\r\n                this.body.collisionType = game.collisionTypes.BOOST;\r\n\r\n            },\r\n            update: function (dt) {\r\n\r\n                return (this._super(me.Entity, 'update', [dt]));\r\n            },\r\n            /**\r\n             * collision handling\r\n             */\r\n            onCollision: function (response, other) {\r\n                if (this.settings.dir == \"right\") {\r\n                    other.body.maxVel.x = other.body.facingLeft ? other.body.runSpeed / 2 : other.body.runSpeed;\r\n                    other.body.force.x = other.body.maxVel.x;\r\n                    other.body.boostedDir = \"right\";\r\n                }\r\n                if (this.settings.dir == \"up\") {\r\n                    other.body.jumping = true;\r\n                    other.body.maxVel.y = other.body.boostedVerticalSpeed;\r\n                    other.body.vel.y = -other.body.maxVel.y;\r\n                    other.body.force.x = 0\r\n                    other.body.boostedDir = \"up\";\r\n                }\r\n\r\n                return false;\r\n            }\r\n        });\r\n\r\n    }\r\n    const extendedGame = await getMainPlayer()\r\n\r\n    return extendedGame\r\n}\r\nexport default mainPlayerMixin","const mainPlayerMixin = async (me, game) => {\r\n    const getMainPlayer = async () => {\r\n        game.BoostTile = me.Entity.extend({\r\n            /**\r\n             * constructor\r\n             */\r\n            init: function (x, y, settings) {\r\n\r\n                this._super(me.Entity, 'init', [x, y, settings]);\r\n\r\n                this.settings = settings;\r\n                // set the collision type\r\n\r\n                this.body.collisionType = game.collisionTypes.BOOSTTILE;\r\n\r\n                if (this.settings.dir == \"right\") {\r\n                    this.body.offTile = 62;\r\n                    this.body.onTile = 66\r\n                } else if (this.settings.dir == \"up\") {\r\n                    this.body.offTile = 63;\r\n                    this.body.onTile = 67\r\n                }\r\n\r\n                // define a jumping animation\r\n                this.renderable.addAnimation(\"off\", [this.body.offTile]);\r\n\r\n                // define a falling animation\r\n                this.renderable.addAnimation(\"on\", [this.body.onTile], 150);\r\n\r\n                this.renderable.setCurrentAnimation(\"off\");\r\n            },\r\n            update: function (dt) {\r\n                return this.renderable.isCurrentAnimation(\"on\") && (this._super(me.Entity, 'update', [dt]));\r\n            },\r\n            /**\r\n             * collision handling\r\n             */\r\n            onCollision: function (response, other) {\r\n                this.renderable.setCurrentAnimation(\"on\", \"off\");\r\n\r\n                return false;\r\n            }\r\n        });\r\n    }\r\n    const extendedGame = await getMainPlayer()\r\n\r\n    return extendedGame\r\n}\r\nexport default mainPlayerMixin","const mainPlayerMixin = async (me, game) => {\r\n    const getMainPlayer = async () => {\r\n        game.CarlEntity = me.Entity.extend({\r\n            /**\r\n             * constructor\r\n             */\r\n            init: function (x, y, settings) {\r\n\r\n                this.startX = x;\r\n                this.starty = y;\r\n\r\n\r\n                // call the super constructor\r\n                this._super(me.Entity, \"init\", [\r\n                    x, y, settings\r\n                ]);\r\n                this.renderable = game.texture.createAnimationFromName([\r\n                    \"carl-0\", \"carl-1\", \"carl-2\",\r\n                    \"carl-3\", \"carl-4\", \"carl-5\",\r\n                    \"carl-6\"\r\n                ]);\r\n                this.anchorPoint.set(0.5, 0.5);\r\n                this.body.setMaxVelocity(6, 0);\r\n\r\n                this.renderable.addAnimation(\"idle\", [0, 1,], 500);\r\n                this.renderable.addAnimation(\"roll\", [2, 3, 4, 5], 70);\r\n                this.renderable.addAnimation(\"dead\", [6]);\r\n                this.renderable.setCurrentAnimation(\"idle\");\r\n\r\n                // set a \"enemyObject\" type\r\n                this.body.collisionType = me.collision.types.ENEMY_OBJECT;\r\n                this.body.setFriction(1, 0);\r\n                // don't update the entities when out of the viewport\r\n                this.alwaysUpdate = false;\r\n\r\n                this.isMovingEnemy = true;\r\n                this.rolling = (false);\r\n                // this.facingRight = false;\r\n                // this.facingLeft = false;\r\n                // this.rollingRight = false;\r\n                this.center = this.startX - 100\r\n                this.roll();\r\n\r\n\r\n            },\r\n\r\n            roll: function () {\r\n                let _this = this;\r\n\r\n                _this.timer = me.timer.setInterval(function () {\r\n\r\n                    if (_this.renderable.isCurrentAnimation(\"roll\") && _this.body.force.x > 0) {\r\n                        _this.body.force.x = 0;\r\n                        _this.renderable.setCurrentAnimation(\"idle\");\r\n                        _this.renderable.flipX(false);\r\n                    }\r\n\r\n                    else if (_this.renderable.isCurrentAnimation(\"roll\") && _this.body.force.x < 0) {\r\n                        _this.body.force.x = 0;\r\n                        _this.renderable.setCurrentAnimation(\"idle\");\r\n                        _this.renderable.flipX(true);\r\n                    }\r\n\r\n                    else if (_this.renderable.isCurrentAnimation(\"idle\") && _this.pos.x < _this.startX) {\r\n                        _this.body.force.x = _this.body.maxVel.x;\r\n                        _this.renderable.setCurrentAnimation(\"roll\");\r\n\r\n                    }\r\n                    else {\r\n                        _this.body.force.x = -_this.body.maxVel.x;\r\n                        _this.renderable.setCurrentAnimation(\"roll\");\r\n                    }\r\n                }, 2000);\r\n            },\r\n\r\n            /**\r\n             * manage the enemy movement\r\n             */\r\n            update: function (dt) {\r\n\r\n                if (this.alive) {\r\n\r\n                    // check & update movement\r\n                    this.body.update(dt);\r\n\r\n                }\r\n\r\n                // return true if we moved of if flickering\r\n                return (this._super(me.Entity, \"update\", [dt]) || this.body.vel.x !== 0 || this.body.vel.y !== 0);\r\n            },\r\n            onDeactivateEvent: function () {\r\n                me.timer.clearInterval(this.timer);\r\n            },\r\n\r\n            /**\r\n             * collision handle\r\n             */\r\n            onCollision: function (response) {\r\n                // res.y >0 means touched by something on the bottom\r\n                // which mean at top position for this one\r\n                if (this.alive && (response.overlapV.y > 0) && response.a.body.falling && !response.a.renderable.isFlickering()) {\r\n                    // make it dead\r\n                    this.alive = false;\r\n                    //avoid further collision and delete it\r\n                    this.body.setCollisionMask(me.collision.types.NO_OBJECT);\r\n                    // set dead animation\r\n                    this.renderable.setCurrentAnimation(\"dead\");\r\n                    // tint to red\r\n                    this.renderable.tint.setColor(255, 192, 192);\r\n                    // make it flicker and call destroy once timer finished\r\n                    var self = this;\r\n                    this.renderable.flicker(750, function () {\r\n                        me.game.world.removeChild(self);\r\n                    });\r\n                    // dead sfx\r\n                    // me.audio.play(\"enemykill\", false);\r\n                    // give some score\r\n                    // game.data.score += 150;\r\n                }\r\n\r\n                return false;\r\n            }\r\n\r\n        });\r\n    }\r\n    const extendedGame = await getMainPlayer()\r\n\r\n    return extendedGame\r\n}\r\nexport default mainPlayerMixin","const mainPlayerMixin = async (me, game) => {\r\n    const getMainPlayer = async () => {\r\n        game.CassetteProjectile = me.Entity.extend({\r\n\r\n            init: function (x, y, settings) {\r\n                this.startY = y;\r\n                this._super(me.Entity, \"init\", [settings.x + 60, settings.y + 100, settings]);\r\n                this.renderable = game.texture.createAnimationFromName([\r\n                    \"cassette-0\", \"cassette-1\", \"cassette-2\",\r\n                ]);\r\n                this.anchorPoint.set(0.5, 0.5);\r\n                this.renderable.addAnimation(\"one\", [0])\r\n                this.renderable.addAnimation(\"two\", [1])\r\n                this.renderable.addAnimation(\"three\", [2])\r\n                this.random = Math.random()\r\n                if (this.random > .66) {\r\n                    this.renderable.setCurrentAnimation(\"one\")\r\n                }\r\n                else if (this.random < .33) {\r\n                    this.renderable.setCurrentAnimation(\"two\")\r\n                }\r\n                else {\r\n                    this.renderable.setCurrentAnimation(\"three\")\r\n                }\r\n\r\n                this.body.force.y = me.Math.random(-12, -9);\r\n                this.body.force.x = me.Math.random(-3, 3)\r\n                this.body.setMaxVelocity(5, 15)\r\n                this.body.collisionType = me.collision.types.PROJECTILE_OBJECT;\r\n                this.alwaysUpdate = false;\r\n            },\r\n\r\n            update: function (dt) {\r\n                this.body.force.y *= .85;\r\n                this.renderable.rotate(.2);\r\n                if (this.pos.y - this.startY > 1080) {\r\n                    me.game.world.removeChild(this);\r\n                }\r\n                this.body.update(dt);\r\n                return (this._super(me.Entity, \"update\", [dt]) || this.body.vel.x !== 0 || this.body.vel.y !== 0);\r\n            },\r\n            onCollision: function (res, other) {\r\n                other.name == \"mainPlayer\" && other.hurt();\r\n                me.game.world.removeChild(this);\r\n            }\r\n        });\r\n\r\n        game.CassetteProjectile.width = 24;\r\n        game.CassetteProjectile.height = 15;\r\n    }\r\n    const extendedGame = await getMainPlayer()\r\n\r\n    return extendedGame\r\n}\r\nexport default mainPlayerMixin","const mainPlayerMixin = async (me, game) => {\r\n    const getMainPlayer = async () => {\r\n        game.GremlinEntity = me.Entity.extend({\r\n            /**\r\n             * constructor\r\n             */\r\n            init: function (x, y, settings) {\r\n\r\n\r\n                // call the super constructor\r\n                this._super(me.Entity, \"init\", [\r\n                    x, y, settings\r\n                ]);\r\n                this.renderable = game.texture.createAnimationFromName([\r\n                    \"gremlin-0\", \"gremlin-1\", \"gremlin-2\",\r\n                    \"gremlin-3\", \"gremlin-4\", \"gremlin-5\",\r\n                ]);\r\n                this.anchorPoint.set(0.5, 0.5);\r\n                this.body.setMaxVelocity(0, 0);\r\n                this.renderable.addAnimation(\"idle\", [0, 1], 400);\r\n                this.renderable.addAnimation(\"flip\", [1, 2, 4, 5, 4, 5, 4, 5, 4, 3, 1], 150);\r\n                this.renderable.addAnimation(\"dead\", [1]);\r\n                this.renderable.setCurrentAnimation(\"idle\");\r\n\r\n                // set a \"enemyObject\" type\r\n                this.body.collisionType = me.collision.types.ENEMY_OBJECT;\r\n                this.body.setFriction(2, 0);\r\n                // don't update the entities when out of the viewport\r\n                this.alwaysUpdate = false;\r\n                this.isMovingEnemy = true;\r\n                this.flip(this.pos);\r\n            },\r\n\r\n            flip: function (pos) {\r\n                let _this = this\r\n                let settings = {\r\n                    width: game.CassetteProjectile.width,\r\n                    height: game.CassetteProjectile.height,\r\n                    region: \"cassette\",\r\n                    image: game.entity_texture_1,\r\n                    framewidth: 24,\r\n                    x: pos.x - 15,\r\n                    y: pos.y + 65,\r\n                }\r\n                _this.timer = me.timer.setInterval(function () {\r\n                    _this.renderable.setCurrentAnimation(\"flip\", \"idle\");\r\n                    if (_this.inViewport) {\r\n                        setTimeout(function () {\r\n                            me.game.world.addChild(me.pool.pull(\"cassetteProjectile\", settings.x, settings.y, settings))\r\n                        }, 500)\r\n                        setTimeout(function () {\r\n                            me.game.world.addChild(me.pool.pull(\"cassetteProjectile\", settings.x, settings.y, settings))\r\n                        }, 1000)\r\n                        me.game.world.addChild(me.pool.pull(\"cassetteProjectile\", settings.x, settings.y, settings))\r\n                    }\r\n                }, 5000);\r\n            },\r\n\r\n            /**\r\n             * manage the enemy movement\r\n             */\r\n            update: function (dt) {\r\n\r\n                if (this.alive) {\r\n\r\n                    // check & update movement\r\n                    this.body.update(dt);\r\n\r\n                }\r\n\r\n                // return true if we moved of if flickering\r\n                return (this._super(me.Entity, \"update\", [dt]) || this.body.vel.x !== 0 || this.body.vel.y !== 0);\r\n            },\r\n            onDeactivateEvent: function () {\r\n                me.timer.clearInterval(this.timer);\r\n            },\r\n\r\n            /**\r\n             * collision handle\r\n             */\r\n            onCollision: function (response) {\r\n                // res.y >0 means touched by something on the bottom\r\n                // which mean at top position for this one\r\n                if (this.alive && (response.overlapV.y > 0) && response.a.body.falling && !response.a.renderable.isFlickering()) {\r\n                    // make it dead\r\n                    this.alive = false;\r\n                    //avoid further collision and delete it\r\n                    this.body.setCollisionMask(me.collision.types.NO_OBJECT);\r\n                    // set dead animation\r\n                    this.renderable.setCurrentAnimation(\"dead\");\r\n                    // tint to red\r\n                    this.renderable.tint.setColor(255, 192, 192);\r\n                    // make it flicker and call destroy once timer finished\r\n                    var self = this;\r\n                    this.renderable.flicker(750, function () {\r\n                        me.game.world.removeChild(self);\r\n                        me.timer.clearInterval(this.timer);\r\n                    });\r\n                    // dead sfx\r\n                    // me.audio.play(\"enemykill\", false);\r\n                    // give some score\r\n                    // game.data.score += 150;\r\n                }\r\n\r\n                return false;\r\n            }\r\n\r\n        });\r\n    }\r\n    const extendedGame = await getMainPlayer()\r\n\r\n    return extendedGame\r\n}\r\nexport default mainPlayerMixin","const mainPlayerMixin = async (me, game) => {\r\n    const getMainPlayer = async () => {\r\n        game.HUD = game.HUD || {};\r\n\r\n        /**\r\n         * a HUD container and child items\r\n         */\r\n        game.HUD.UIContainer = me.Container.extend({\r\n\r\n            init: function () {\r\n                // call the constructor\r\n                this._super(me.Container, \"init\");\r\n\r\n                // persistent across level change\r\n                this.isPersistent = true;\r\n\r\n                // Use screen coordinates\r\n                this.floating = true;\r\n\r\n                // make sure our object is always draw first\r\n                this.z = Infinity;\r\n\r\n                // give a name\r\n                this.name = \"HUD\";\r\n\r\n                // add our child score object at position\r\n                this.addChild(new game.HUD.ScoreItem(-10, -10));\r\n\r\n                // add our audio control object\r\n                this.addChild(new game.HUD.AudioControl(36, 56));\r\n\r\n                if (!me.device.isMobile) {\r\n                    // add our fullscreen control object\r\n                    this.addChild(new game.HUD.FSControl(36 + 10 + 48, 56));\r\n                }\r\n            }\r\n        });\r\n\r\n        /**\r\n         * a basic control to toggle fullscreen on/off\r\n         */\r\n        game.HUD.FSControl = me.GUI_Object.extend({\r\n            /**\r\n             * constructor\r\n             */\r\n            init: function (x, y) {\r\n                this._super(me.GUI_Object, \"init\", [x, y, {\r\n                    image: game.texture,\r\n                    region: \"shadedDark30\"\r\n                }]);\r\n                this.setOpacity(0.5);\r\n            },\r\n\r\n            /**\r\n             * function called when the pointer is over the object\r\n             */\r\n            onOver: function (/* event */) {\r\n                this.setOpacity(1.0);\r\n            },\r\n\r\n            /**\r\n             * function called when the pointer is leaving the object area\r\n             */\r\n            onOut: function (/* event */) {\r\n                this.setOpacity(0.5);\r\n            },\r\n\r\n            /**\r\n             * function called when the object is clicked on\r\n             */\r\n            onClick: function (/* event */) {\r\n                if (!me.device.isFullscreen) {\r\n                    me.device.requestFullscreen();\r\n                } else {\r\n                    me.device.exitFullscreen();\r\n                }\r\n                return false;\r\n            }\r\n        });\r\n\r\n        /**\r\n         * a basic control to toggle fullscreen on/off\r\n         */\r\n        game.HUD.AudioControl = me.GUI_Object.extend({\r\n            /**\r\n             * constructor\r\n             */\r\n            init: function (x, y) {\r\n                this._super(me.GUI_Object, \"init\", [x, y, {\r\n                    image: game.texture,\r\n                    region: \"shadedDark13\" // ON by default\r\n                }]);\r\n                this.setOpacity(0.5);\r\n                this.isMute = false;\r\n            },\r\n\r\n            /**\r\n             * function called when the pointer is over the object\r\n             */\r\n            onOver: function (/* event */) {\r\n                this.setOpacity(1.0);\r\n            },\r\n\r\n            /**\r\n             * function called when the pointer is leaving the object area\r\n             */\r\n            onOut: function (/* event */) {\r\n                this.setOpacity(0.5);\r\n            },\r\n\r\n            /**\r\n             * function called when the object is clicked on\r\n             */\r\n            onClick: function (/* event */) {\r\n                if (this.isMute) {\r\n                    me.audio.unmuteAll();\r\n                    this.setRegion(game.texture.getRegion(\"shadedDark13\"));\r\n                    this.isMute = false;\r\n                } else {\r\n                    me.audio.muteAll();\r\n                    this.setRegion(game.texture.getRegion(\"shadedDark15\"));\r\n                    this.isMute = true;\r\n                }\r\n                return false;\r\n            }\r\n        });\r\n\r\n        /**\r\n         * a basic HUD item to display score\r\n         */\r\n        game.HUD.ScoreItem = me.Renderable.extend({\r\n            /**\r\n             * constructor\r\n             */\r\n            init: function (x, y) {\r\n                this.relative = new me.Vector2d(x, y);\r\n\r\n                // call the super constructor\r\n                // (size does not matter here)\r\n                this._super(me.Renderable, \"init\", [\r\n                    me.game.viewport.width + x,\r\n                    me.game.viewport.height + y,\r\n                    10,\r\n                    10\r\n                ]);\r\n\r\n                // create a font\r\n                this.font = new me.BitmapText(0, 0, {\r\n                    font: \"PressStart2P\",\r\n                    textAlign: \"right\",\r\n                    textBaseline: \"bottom\"\r\n                });\r\n\r\n                // local copy of the global score\r\n                this.score = -1;\r\n\r\n                // recalculate the object position if the canvas is resize\r\n                me.event.subscribe(me.event.CANVAS_ONRESIZE, (function (w, h) {\r\n                    this.pos.set(w, h, 0).add(this.relative);\r\n                }).bind(this));\r\n            },\r\n\r\n            /**\r\n             * update function\r\n             */\r\n            update: function (/*dt*/) {\r\n                // we don't draw anything fancy here, so just\r\n                // return true if the score has been updated\r\n                if (this.score !== game.data.score) {\r\n                    this.score = game.data.score;\r\n                    return true;\r\n                }\r\n                return false;\r\n            },\r\n\r\n            /**\r\n             * draw the score\r\n             */\r\n            draw: function (renderer) {\r\n                this.font.draw(renderer, game.data.score, this.pos.x, this.pos.y);\r\n            }\r\n\r\n        });\r\n\r\n    }\r\n    const extendedGame = await getMainPlayer()\r\n\r\n    return extendedGame\r\n}\r\nexport default mainPlayerMixin","const mainPlayerMixin = async (me, game) => {\r\n    const getMainPlayer = async () => {\r\n        game.PacManEntity = me.Entity.extend({\r\n\r\n            init: function (x, y, settings) {\r\n                this.startX = x;\r\n\r\n                this._super(me.Entity, \"init\", [settings.x, settings.y, settings]);\r\n                // this.body.addShape(new me.Rect(x, y, this.width, this.height));\r\n                this.renderable = game.texture.createAnimationFromName([\r\n                    \"pacMan-0\", \"pacMan-1\", \"pacMan-2\"\r\n                ]);\r\n                this.anchorPoint.set(0.5, 0.5);\r\n                this.body.setVelocity(30, 0);\r\n                this.body.collisionType = me.collision.types.PROJECTILE_OBJECT;\r\n                this.pos.z = 8;\r\n                this.alwaysUpdate = true;\r\n            },\r\n\r\n            update: function (dt) {\r\n                // this.body.vel.x -= this.body.accel.x * dt / 1000;\r\n\r\n                this.body.vel.x = 5;\r\n                if (this.pos.x - this.startX > 2160) { //do something better\r\n                    me.game.world.removeChild(this);\r\n                }\r\n\r\n                this.body.update();\r\n                me.collision.check(this);\r\n\r\n                return (this._super(me.Entity, 'update', [dt]) || this.body.vel.x !== 0 || this.body.vel.y !== 0);\r\n            },\r\n            onCollision: function (res, other) {\r\n                if (this.pos.x - this.startX > 25) {\r\n                    other.name == \"mainPlayer\" && other.hurt();\r\n                    me.game.world.removeChild(this);\r\n                }\r\n            }\r\n        });\r\n\r\n        game.PacManEntity.width = 60;\r\n        game.PacManEntity.height = 60;\r\n    }\r\n    const extendedGame = await getMainPlayer()\r\n\r\n    return extendedGame\r\n}\r\nexport default mainPlayerMixin","const mainPlayerMixin = async (me, game) => {\r\n    const getMainPlayer = async function () {\r\n        game.ProtonBeam = me.Entity.extend({\r\n\r\n            init: function (x, y, settings) {\r\n\r\n\r\n                this._super(me.Entity, \"init\", [settings.containerWidth - 8, settings.containerHeight / 2 - 6, settings]);\r\n                // this.body.addShape(new me.Rect(x, y, this.width, this.height));\r\n                this.renderable = game.texture.createAnimationFromName([\r\n                    \"protonbeam-0\", \"protonbeam-1\", \"protonbeam-2\",\r\n                    \"protonbeam-3\", \"protonbeam-4\", \"protonbeam-5\",\r\n                    \"protonbeam-6\", \"protonbeam-7\", \"protonbeam-8\",\r\n                    \"protonbeam-9\", \"protonbeam-10\", \"protonbeam-11\",\r\n                    \"protonbeam-12\", \"protonbeam-13\", \"protonbeam-14\",\r\n                    \"protonbeam-15\", \"protonbeam-16\", \"protonbeam-17\",\r\n                    \"protonbeam-18\", \"protonbeam-19\", \"protonbeam-20\",\r\n                    \"protonbeam-21\", \"protonbeam-22\", \"protonbeam-23\",\r\n                    \"protonbeam-24\", \"protonbeam-25\", \"protonbeam-26\",\r\n                    \"protonbeam-27\", \"protonbeam-28\", \"protonbeam-29\",\r\n                    \"protonbeam-30\", \"protonbeam-31\", \"protonbeam-32\",\r\n                    \"protonbeam-33\", \"protonbeam-34\", \"protonbeam-35\",\r\n                ]);\r\n                this.anchorPoint.set(0.5, 0.5);\r\n                this.body.setVelocity(30, 0);\r\n                this.body.collisionType = me.collision.types.PROJECTILE_OBJECT;\r\n                this.pos.z = 8;\r\n                this.renderable.addAnimation(\"shoot\", [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 31, 32, 33], 50);\r\n                this.renderable.addAnimation(\"maxRange\", [34, 35], 50);\r\n                this.renderable.setCurrentAnimation(\"shoot\");\r\n                this.renderable.setOpacity(0);\r\n                this.shoot();\r\n            },\r\n\r\n            shoot: function (pos) {\r\n                var _this = this;\r\n\r\n                this.timer = me.timer.setInterval(function () {\r\n                    _this.renderable.setOpacity(1);\r\n                    _this.renderable.setAnimationFrame();\r\n                    _this.renderable.setCurrentAnimation(\"shoot\", function () {\r\n                        _this.renderable.setCurrentAnimation(\"maxRange\");\r\n                        setTimeout(function () {\r\n                            _this.renderable.setOpacity(0);\r\n                        }, 1000);\r\n                    });\r\n\r\n                }, 3000);\r\n\r\n\r\n            },\r\n            update: function (dt) {\r\n                // this.body.vel.x -= this.body.accel.x * dt / 1000;\r\n\r\n                // if (this.pos.x + this.height <= 0) {\r\n                //     me.game.world.removeChild(this);\r\n                // }\r\n\r\n                this.body.update();\r\n                // me.collision.check(this);\r\n\r\n                return (this._super(me.Entity, 'update', [dt]) || this.body.vel.x !== 0 || this.body.vel.y !== 0);\r\n            },\r\n            onDeactivateEvent: function () {\r\n                me.timer.clearInterval(this.timer);\r\n            },\r\n            onCollision: function (res, other) {\r\n                other.name == \"mainPlayer\" && other.hurt();\r\n                return false;\r\n            }\r\n        });\r\n\r\n        game.ProtonBeam.width = 720;\r\n        game.ProtonBeam.height = 48;\r\n    }\r\n    const extendedGame = await getMainPlayer()\r\n\r\n    return extendedGame\r\n}\r\nexport default mainPlayerMixin","const mainPlayerMixin = async (me, game) => {\r\n    const getMainPlayer = async () => {\r\n        game.PlayerEntity = me.Entity.extend({\r\n            /**\r\n             * constructor\r\n             */\r\n            init: function (x, y, settings) {\r\n                // call the constructor\r\n                this._super(me.Entity, \"init\", [\r\n                    x, y,\r\n                    Object.assign({\r\n                        image: game.texture,\r\n                        region: \"jim_sprite-0\"\r\n                    }, settings)\r\n                ]);\r\n                this.body.runSpeed = 9;\r\n                this.body.jumpSpeed = this.body.jumpForce = 18;\r\n                this.body.boostedHorizontalSpeed = this.body.runSpeed * 2;\r\n                this.body.boostedVerticalSpeed = this.body.jumpSpeed * 1.5;\r\n                this.body.facingLeft = false;\r\n                this.body.boostedDir = \"\";\r\n                this.body.isWarping = false;\r\n                this.body.crouching = false;\r\n\r\n                // max walking & jumping speed\r\n                this.body.setMaxVelocity(this.body.runSpeed, this.body.jumpSpeed);\r\n                this.body.setFriction(0.7, 0);\r\n                // set the display to follow our position on both axis\r\n                me.game.viewport.follow(this.pos, me.game.viewport.AXIS.BOTH, 0.4);\r\n\r\n                // ensure the player is updated even when outside of the viewport\r\n                this.alwaysUpdate = true;\r\n                this.renderable = game.texture.createAnimationFromName([\r\n                    \"jim_sprite-0\", \"jim_sprite-1\", \"jim_sprite-2\",\r\n                    \"jim_sprite-3\", \"jim_sprite-4\", \"jim_sprite-5\",\r\n                    \"jim_sprite-6\", \"jim_sprite-7\", \"jim_sprite-8\",\r\n                    \"jim_sprite-9\", \"jim_sprite-10\", \"jim_sprite-11\",\r\n                    \"jim_sprite-12\", \"jim_sprite-13\",\r\n                ]);\r\n                this.anchorPoint.set(0.5, 0.5);\r\n                this.renderable.addAnimation(\"walk\", [0, 1, 2, 3], 200);\r\n                this.renderable.addAnimation(\"idle\", [4, 5], 500);\r\n                this.renderable.addAnimation(\"jump\", [2]);\r\n                this.renderable.addAnimation(\"fall\", [1]);\r\n                this.renderable.addAnimation(\"crouch\", [6]);\r\n\r\n                this.renderable.addAnimation(\"emote\", [{ name: \"jim_sprite-10\", delay: 1000 }, { name: \"jim_sprite-11\", delay: Infinity }]);\r\n                this.renderable.addAnimation(\"attack\", [{ name: \"jim_sprite-8\", delay: 50 }, { name: \"jim_sprite-9\", delay: 150 }]);\r\n                this.renderable.addAnimation(\"crouchAttack\", [{ name: \"jim_sprite-7\", delay: 50 }, { name: \"jim_sprite-12\", delay: 150 }]);\r\n\r\n\r\n                // // set the standing animation as default\r\n                // this.renderable.setCurrentAnimation(\"idle\");\r\n\r\n                // this.bottomLine = new me.Line(0, 0, [\r\n                //     new me.Vector2d(30, 162),\r\n                //     new me.Vector2d(30, 182)\r\n                // ]);\r\n                // this.body.addShape(this.bottomLine);\r\n                // this.leftLine = new me.Line(0, 0, [\r\n                //     new me.Vector2d(-5, 50),\r\n                //     new me.Vector2d(-5, 90)\r\n                // ]);\r\n                // this.body.addShape(this.leftLine);\r\n\r\n                // this.crouchBox = this.body.addShape(new me.Rect(0, 0, this.width, this.height / 2));\r\n\r\n\r\n\r\n            },\r\n\r\n            /**\r\n             * update the entity\r\n             */\r\n            update: function (dt) {\r\n\r\n                if (this.body.isWarping) {\r\n                    return true;\r\n                }\r\n                if (me.input.isKeyPressed('left')) {\r\n\r\n                    this.body.facingLeft = true;\r\n\r\n                    // flip the sprite on horizontal axis\r\n                    this.renderable.flipX(true);\r\n                    // update the default force\r\n                    this.body.force.x = -this.body.runSpeed;\r\n\r\n                    // change to the walking animation\r\n                    if (!this.renderable.isCurrentAnimation(\"walk\")) {\r\n                        if (!this.body.jumping && !this.body.falling) {\r\n                            this.renderable.setAnimationFrame();\r\n                            this.renderable.setCurrentAnimation(\"walk\");\r\n                        }\r\n                    }\r\n                } else if (me.input.isKeyPressed('right')) {\r\n\r\n                    this.body.facingLeft = false;\r\n\r\n                    // unflip the sprite\r\n                    this.renderable.flipX(false);\r\n                    // update the entity velocity\r\n\r\n\r\n                    if (this.body.boostedDir == \"right\") {\r\n                        this.body.maxVel.x = this.body.runSpeed * 2;\r\n                    } else {\r\n                        this.body.force.x = this.body.runSpeed;\r\n                    }\r\n\r\n                    // change to the walking animation\r\n                    if (!this.renderable.isCurrentAnimation(\"walk\")) {\r\n                        if (!this.body.jumping && !this.body.falling) {\r\n                            this.renderable.setAnimationFrame();\r\n                            this.renderable.setCurrentAnimation(\"walk\");\r\n                        }\r\n                    }\r\n                } else {\r\n                    if (!this.body.boostedDir) {\r\n                        this.body.force.x = 0;\r\n                    }\r\n                    if (!this.renderable.isCurrentAnimation(\"idle\")) {\r\n                        if (!this.body.jumping &&\r\n                            !this.body.falling &&\r\n                            !me.input.isKeyPressed('down') &&\r\n                            !this.renderable.isCurrentAnimation(\"attack\")) {\r\n                            this.renderable.setAnimationFrame();\r\n                            this.renderable.setCurrentAnimation(\"idle\");\r\n                        }\r\n                    }\r\n                }\r\n\r\n                if (me.input.isKeyPressed('down') &&\r\n                    !this.body.jumping &&\r\n                    !this.body.falling &&\r\n                    !this.renderable.isCurrentAnimation(\"crouch\") &&\r\n                    !this.renderable.isCurrentAnimation(\"crouchAttack\")) {\r\n                    // this.renderable.flipX(false);\r\n                    this.body.force.x = 0;\r\n                    this.renderable.setAnimationFrame();\r\n                    this.renderable.setCurrentAnimation(\"crouch\");\r\n                }\r\n                // debugVal(me.timer.tick);\r\n                if (me.input.isKeyPressed('jump') && this.body.jumpForce > 7) {\r\n                    this.body.jumpForce *= .9;\r\n                    if (!this.body.jumping && !this.body.falling) {\r\n                        // set current vel to the maximum defined value\r\n                        // gravity will then do the rest\r\n                        this.body.jumping = true;\r\n                        this.body.force.y -= this.body.jumpForce;\r\n                    }\r\n                }\r\n                else {\r\n                    this.body.force.y = 0;\r\n                }\r\n\r\n                if (me.input.isKeyPressed('attack')) {\r\n                    if (this.renderable.isCurrentAnimation(\"crouch\") || this.renderable.isCurrentAnimation(\"crouchAttack\")) {\r\n                        this.renderable.setAnimationFrame();\r\n                        this.renderable.setCurrentAnimation(\"crouchAttack\", \"crouch\");\r\n                    } else {\r\n                        this.renderable.setAnimationFrame();\r\n                        this.renderable.setCurrentAnimation(\"attack\", \"idle\");\r\n                    }\r\n                }\r\n\r\n                // TODO: emote\r\n                // if (!this.body.jumping && !this.body.falling && !this.renderable.isCurrentAnimation(\"emote\")) {\r\n                //     this.renderable.flipX(false);\r\n                //     this.body.force.x = 0;\r\n                //     this.renderable.setAnimationFrame();\r\n                //     this.renderable.setCurrentAnimation(\"emote\");\r\n                // }\r\n\r\n                if (this.body.falling && !this.renderable.isCurrentAnimation(\"fall\")) {\r\n                    this.renderable.setCurrentAnimation(\"fall\")\r\n                }\r\n                if (this.body.jumping && !this.renderable.isCurrentAnimation(\"jump\")) {\r\n                    this.renderable.setCurrentAnimation(\"jump\")\r\n                }\r\n                if (this.body.jumping && this.body.falling) {\r\n                    this.body.jumping = false;\r\n                }\r\n\r\n                // apply physics to the body (this moves the entity)\r\n                this.body.update(dt);\r\n\r\n                // handle collisions against other shapes\r\n                me.collision.check(this);\r\n\r\n                // return true if we moved or if the renderable was updated\r\n                return (this._super(me.Entity, 'update', [dt]) || this.body.vel.x !== 0 || this.body.vel.y !== 0);\r\n            },\r\n\r\n            /**\r\n             * colision handler\r\n             */\r\n            onCollision: function (response, other) {\r\n\r\n\r\n                switch (other.body.collisionType) {\r\n                    case me.collision.types.WORLD_SHAPE:\r\n                        if (this.body.boostedDir && !this.body.jumping) {\r\n                            this.body.setMaxVelocity(this.body.runSpeed, this.body.jumpSpeed);\r\n                            this.body.boostedDir = \"\";\r\n                        }\r\n                        if (this.body.falling && this.body.jumpForce != this.body.jumpSpeed) {\r\n                            this.body.jumpForce = this.body.jumpSpeed;\r\n                        }\r\n\r\n                        break;\r\n                    case game.collisionTypes.BOOST:\r\n                        if (this.body.falling && this.body.jumpForce != this.body.jumpSpeed) {\r\n                            this.body.jumpForce = this.body.jumpSpeed;\r\n                        }\r\n                        break;\r\n                    case me.collision.types.ENEMY_OBJECT:\r\n                        if (!other.isMovingEnemy) {\r\n                            // spike or any other fixed danger\r\n                            this.body.vel.y -= this.body.maxVel.y * me.timer.tick;\r\n                            this.hurt();\r\n                        }\r\n                        else {\r\n                            // a regular moving enemy entity\r\n                            if ((response.overlapV.y > 0) && this.body.falling && !this.renderable.isFlickering()) {\r\n                                // jump\r\n                                this.body.vel.y -= this.body.maxVel.y * 1.5 * me.timer.tick;\r\n                            }\r\n                            else {\r\n                                this.hurt();\r\n                            }\r\n                            // Not solid\r\n                            return false;\r\n                        }\r\n                        break;\r\n\r\n                    default:\r\n                        // Do not respond to other objects (e.g. coins)\r\n                        return false;\r\n                }\r\n\r\n                return true;\r\n\r\n            },\r\n\r\n            hurt: function () {\r\n                var sprite = this.renderable;\r\n\r\n                if (!sprite.isFlickering()) {\r\n\r\n                    // tint to red and flicker\r\n                    sprite.tint.setColor(255, 192, 192);\r\n                    sprite.flicker(750, function () {\r\n                        // clear the tint once the flickering effect is over\r\n                        sprite.tint.setColor(255, 255, 255);\r\n                    });\r\n\r\n                    // flash the screen\r\n                    // me.game.viewport.fadeIn(\"#FFFFFF\", 75);\r\n                    // me.audio.play(\"die\", false);\r\n                }\r\n            }\r\n        })\r\n    }\r\n    const extendedGame = await getMainPlayer()\r\n\r\n    return extendedGame\r\n}\r\nexport default mainPlayerMixin","const mainPlayerMixin = async (me, game) => {\r\n    const getMainPlayer = async () => {\r\n        game.SkeletorEntity = me.Entity.extend({\r\n            /**\r\n             * constructor\r\n             */\r\n            init: function (x, y, settings) {\r\n\r\n\r\n                // call the super constructor\r\n                this._super(me.Entity, \"init\", [\r\n                    x, y, settings\r\n                ]);\r\n                this.renderable = game.texture.createAnimationFromName([\r\n                    \"skeletor-0\", \"skeletor-1\", \"skeletor-2\",]);\r\n                this.anchorPoint.set(0.5, 0.5);\r\n                this.body.setMaxVelocity(0, 0);\r\n\r\n                this.renderable.addAnimation(\"idle\", [0, 1], 500);\r\n                this.renderable.addAnimation(\"shoot\", [1, 2, 1, 2,], 200);\r\n                this.renderable.addAnimation(\"dead\", [1]);\r\n                this.renderable.setCurrentAnimation(\"idle\");\r\n\r\n                // set a \"enemyObject\" type\r\n                this.body.collisionType = me.collision.types.ENEMY_OBJECT;\r\n                this.body.setFriction(2, 0);\r\n                // don't update the entities when out of the viewport\r\n                this.alwaysUpdate = false;\r\n\r\n                this.isMovingEnemy = true;\r\n                this.shoot(this.pos)\r\n            },\r\n            shoot: function (pos) {\r\n                var _this = this;\r\n                var settings = {\r\n                    width: game.PacManEntity.width,\r\n                    height: game.PacManEntity.height,\r\n                    region: \"pacMan\",\r\n                    image: game.entity_texture_1,\r\n                    framewidth: 60,\r\n                    x: pos.x + 140,\r\n                    y: pos.y + 106,\r\n                }\r\n                _this.timer = me.timer.setInterval(function () {\r\n                    _this.renderable.setAnimationFrame();\r\n                    _this.renderable.setCurrentAnimation(\"shoot\", \"idle\");\r\n                    me.game.world.addChild(me.pool.pull(\"pacMan\", settings.x, settings.y, settings))\r\n                }, 3000);\r\n\r\n\r\n            },\r\n\r\n            /**\r\n             * manage the enemy movement\r\n             */\r\n            update: function (dt) {\r\n\r\n                if (this.alive) {\r\n\r\n                    // check & update movement\r\n                    this.body.update(dt);\r\n\r\n                }\r\n\r\n                // return true if we moved of if flickering\r\n                return (this._super(me.Entity, \"update\", [dt]) || this.body.vel.x !== 0 || this.body.vel.y !== 0);\r\n            },\r\n            onDeactivateEvent: function () {\r\n                me.timer.clearInterval(this.timer);\r\n            },\r\n\r\n            /**\r\n             * collision handle\r\n             */\r\n            onCollision: function (response) {\r\n                // res.y >0 means touched by something on the bottom\r\n                // which mean at top position for this one\r\n                if (this.alive && (response.overlapV.y > 0) && response.a.body.falling && !response.a.renderable.isFlickering()) {\r\n                    // make it dead\r\n                    this.alive = false;\r\n                    //avoid further collision and delete it\r\n                    this.body.setCollisionMask(me.collision.types.NO_OBJECT);\r\n                    // set dead animation\r\n                    this.renderable.setCurrentAnimation(\"dead\");\r\n                    // tint to red\r\n                    this.renderable.tint.setColor(255, 192, 192);\r\n                    // make it flicker and call destroy once timer finished\r\n                    var self = this;\r\n                    this.renderable.flicker(750, function () {\r\n                        me.game.world.removeChild(self);\r\n                    });\r\n                    // dead sfx\r\n                    // me.audio.play(\"enemykill\", false);\r\n                    // give some score\r\n                    // game.data.score += 150;\r\n                }\r\n\r\n                return false;\r\n            }\r\n\r\n        });\r\n    }\r\n    const extendedGame = await getMainPlayer()\r\n\r\n    return extendedGame\r\n}\r\nexport default mainPlayerMixin","const mainPlayerMixin = async (me, game) => {\r\n    const getMainPlayer = async () => {\r\n        game.SimonEntity = me.Entity.extend({\r\n            /**\r\n             * constructor\r\n             */\r\n            init: function (x, y, settings) {\r\n\r\n                // call the super constructor\r\n                this._super(me.Entity, \"init\", [\r\n                    x, y, settings\r\n                ]);\r\n                this.body.setMaxVelocity(0, 0);\r\n                this.renderable = game.texture.createAnimationFromName([\r\n                    \"simon-0\", \"simon-1\", \"simon-2\",\r\n                    \"simon-3\", \"simon-4\", \"simon-5\",\r\n                    \"simon-6\"\r\n                ]);\r\n                this.anchorPoint.set(0.5, 0.4);\r\n                this.renderable.addAnimation(\"idle\", [0, 1, 2, 3], 500);\r\n                this.renderable.addAnimation(\"shoot\", [4, 5], 100);\r\n                this.renderable.addAnimation(\"dead\", [6]);\r\n                this.renderable.setCurrentAnimation(\"idle\");\r\n\r\n                // set a \"enemyObject\" type\r\n                this.body.collisionType = me.collision.types.ENEMY_OBJECT;\r\n\r\n                // don't update the entities when out of the viewport\r\n                this.alwaysUpdate = false;\r\n\r\n                this.isMovingEnemy = true;\r\n                this.shoot(this.pos)\r\n            },\r\n            shoot: function (pos) {\r\n                var _this = this;\r\n                var settings = {\r\n                    width: game.CubeProjectile.width,\r\n                    height: game.CubeProjectile.height,\r\n                    region: \"cube\",\r\n                    image: game.entity_texture_1,\r\n                    framewidth: 21,\r\n                    x: pos.x - 75,\r\n                    y: pos.y + 35,\r\n                }\r\n                this.timer = me.timer.setInterval(function () {\r\n                    _this.renderable.setAnimationFrame();\r\n                    _this.renderable.setCurrentAnimation(\"shoot\", \"idle\");\r\n                    me.game.world.addChild(me.pool.pull(\"cubeProjectile\", settings.x, settings.y, settings))\r\n                }, 3000);\r\n\r\n\r\n            },\r\n\r\n            /**\r\n             * manage the enemy movement\r\n             */\r\n            update: function (dt) {\r\n\r\n                if (this.alive) {\r\n\r\n                    // check & update movement\r\n                    this.body.update(dt);\r\n\r\n                }\r\n\r\n                // return true if we moved of if flickering\r\n                return (this._super(me.Entity, \"update\", [dt]) || this.body.vel.x !== 0 || this.body.vel.y !== 0);\r\n            },\r\n            onDeactivateEvent: function () {\r\n                me.timer.clearInterval(this.timer);\r\n            },\r\n\r\n            /**\r\n             * collision handle\r\n             */\r\n            onCollision: function (response) {\r\n                // res.y >0 means touched by something on the bottom\r\n                // which mean at top position for this one\r\n                if (this.alive && (response.overlapV.y > 0) && response.a.body.falling && !response.a.renderable.isFlickering()) {\r\n                    // make it dead\r\n                    this.alive = false;\r\n                    //stop shooting\r\n                    me.timer.clearInterval(this.timer);\r\n                    //avoid further collision and delete it\r\n                    this.body.setCollisionMask(me.collision.types.NO_OBJECT);\r\n                    // set dead animation\r\n                    this.renderable.setCurrentAnimation(\"dead\");\r\n                    // tint to red\r\n                    this.renderable.tint.setColor(255, 192, 192);\r\n                    // make it flicker and call destroy once timer finished\r\n                    var self = this;\r\n                    this.renderable.flicker(750, function () {\r\n                        me.game.world.removeChild(self);\r\n                    });\r\n                    // dead sfx\r\n                    // me.audio.play(\"enemykill\", false);\r\n                    // give some score\r\n                    // game.data.score += 150;\r\n                }\r\n\r\n                return false;\r\n            }\r\n\r\n        });\r\n    }\r\n    const extendedGame = await getMainPlayer()\r\n\r\n    return extendedGame\r\n}\r\nexport default mainPlayerMixin","const mainPlayerMixin = async (me, game) => {\r\n    const getMainPlayer = async () => {\r\n        game.WarpEntity = me.Entity.extend({\r\n            /**\r\n             * constructor\r\n             */\r\n            init: function (x, y, settings) {\r\n\r\n                this._super(me.Entity, \"init\", [\r\n                    x, y, settings\r\n                ]);\r\n\r\n                this.settings = settings;\r\n                // set the collision type\r\n\r\n                this.body.collisionType = game.collisionTypes.WARP;\r\n                this.canFade = true;\r\n\r\n                this.renderable = game.texture.createAnimationFromName([\r\n                    \"phonebooth-0\", \"phonebooth-1\", \"phonebooth-2\",\r\n                    \"phonebooth-3\", \"phonebooth-4\", \"phonebooth-5\",\r\n                    \"phonebooth-6\", \"phonebooth-7\", \"phonebooth-8\",\r\n                    \"phonebooth-9\", \"phonebooth-10\", \"phonebooth-11\",\r\n                    \"phonebooth-12\", \"phonebooth-13\", \"phonebooth-14\",\r\n                ]);\r\n                this.anchorPoint.set(0.5, 0.5);\r\n                this.renderable.addAnimation(\"idle\", [0]);\r\n                this.renderable.addAnimation(\"open\", [{ name: 1, delay: 150 }, { name: 2, delay: Infinity }]);\r\n                this.renderable.addAnimation(\"close\", [{ name: 1, delay: 150 }, { name: 0, delay: Infinity }]);\r\n                this.renderable.addAnimation(\"flicker\", [3, 2, 3, 2], 400);\r\n                this.renderable.addAnimation(\"warp\", [\r\n                    { name: 4, delay: 150 },\r\n                    { name: 5, delay: 150 },\r\n                    { name: 6, delay: 150 },\r\n                    { name: 7, delay: 150 },\r\n                    { name: 6, delay: 150 },\r\n                    { name: 8, delay: 150 },\r\n                    { name: 6, delay: 150 },\r\n                    { name: 7, delay: 150 },\r\n                    { name: 8, delay: 150 },\r\n                    { name: 7, delay: 150 },\r\n                    { name: 6, delay: 150 },\r\n                    { name: 9, delay: 150 },\r\n                    { name: 10, delay: 150 },\r\n                    { name: 11, delay: 150 },\r\n                    { name: 12, delay: 150 },\r\n                    { name: 13, delay: 150 },\r\n                    { name: 12, delay: 100 },\r\n                    { name: 13, delay: 75 },\r\n\r\n                ]);\r\n                this.renderable.addAnimation(\"warped\", [14]);\r\n                this.renderable.setCurrentAnimation(\"idle\");\r\n            },\r\n            warpTo: function (level) {\r\n                me.game.viewport.fadeIn(\"#000\", 500, function () {\r\n                    me.levelDirector.loadLevel(level);\r\n                });\r\n            },\r\n            update: function (dt) {\r\n                if (this.renderable.isCurrentAnimation(\"open\") && !me.collision.check(this)) {\r\n                    this.renderable.setAnimationFrame();\r\n                    this.renderable.setCurrentAnimation(\"close\")\r\n                }\r\n                if (this.renderable.isCurrentAnimation(\"warp\") &&\r\n                    this.renderable.getCurrentAnimationFrame() > 15 &&\r\n                    this.renderable.pos.y < 230) {\r\n                    this.renderable.pos.y += 20;\r\n                }\r\n                if (this.renderable.isCurrentAnimation(\"warped\") && this.canFade) {\r\n                    this.warpTo(this.settings.to);\r\n                    this.canFade = false;\r\n                }\r\n\r\n\r\n                return (this._super(me.Entity, 'update', [dt])) || this.renderable.isCurrentAnimation(\"warp\");\r\n            },\r\n            /**\r\n             * collision handling\r\n             */\r\n            onCollision: function (response, other) {\r\n                if (other.name == \"mainPlayer\") {\r\n\r\n                    if (!this.renderable.isCurrentAnimation(\"open\") &&\r\n                        !this.renderable.isCurrentAnimation(\"flicker\") &&\r\n                        !this.renderable.isCurrentAnimation(\"warp\") &&\r\n                        !this.renderable.isCurrentAnimation(\"warped\")) {\r\n                        this.renderable.setAnimationFrame();\r\n                        this.renderable.setCurrentAnimation(\"open\");\r\n                    }\r\n\r\n                    if (me.input.isKeyPressed('down') && !other.body.jumping && !other.body.falling) {\r\n                        if (this.renderable.isCurrentAnimation(\"open\")) {\r\n                            if (other.body.facingLeft) {\r\n                                other.renderable.flipX(false);\r\n                            }\r\n                            other.body.isWarping = true;\r\n                            var self = this;\r\n                            self.renderable.setCurrentAnimation('flicker', function () {\r\n                                other.renderable.setOpacity(0);\r\n                                me.audio.play(\"phonebooth\", false);\r\n                                self.renderable.setCurrentAnimation('warp', function () {\r\n                                    self.renderable.pos.y = 0;\r\n                                    self.renderable.setCurrentAnimation('warped');\r\n                                });\r\n                            });\r\n                            other.renderable.setAnimationFrame();\r\n                            other.renderable.setCurrentAnimation(\"emote\");\r\n                        }\r\n                    }\r\n                }\r\n\r\n                return false;\r\n            }\r\n        });\r\n    }\r\n    const extendedGame = await getMainPlayer()\r\n\r\n    return extendedGame\r\n}\r\nexport default mainPlayerMixin","const mainPlayerMixin = async (me, game) => {\r\n    const getMainPlayer = async () => {\r\n        game.SlimerContainer = me.Container.extend({\r\n            /**\r\n             * constructor\r\n             */\r\n            init: function (x, y, settings) {\r\n\r\n                this.startX = x;\r\n                this.startY = y;\r\n                this.settings = settings\r\n                this.maxSpeed = 3;\r\n                this.velX = 0;\r\n                this.velY = 0;\r\n                // call the super constructor\r\n                this._super(me.Container, \"init\", [x, y, settings.width, settings.height]);\r\n\r\n\r\n                var beamSettings = {\r\n                    width: game.ProtonBeam.width,\r\n                    height: game.ProtonBeam.height,\r\n                    framewidth: 720,\r\n                    containerWidth: this.width,\r\n                    containerHeight: this.height\r\n                }\r\n\r\n                this.addChild(me.pool.pull(\"protonBeam\", beamSettings.x, beamSettings.y, beamSettings));\r\n\r\n                this.addChild(me.pool.pull(\"slimerEntity\", x, y, settings), 9);\r\n                this.changeDirection();\r\n\r\n            },\r\n\r\n            changeDirection: function () {\r\n                var _this = this;\r\n                //temporary not so great random movement\r\n                this.timer = me.timer.setInterval(function () {\r\n                    // horizontal\r\n                    if (_this.startX < _this.pos.x || Math.random() < 0.1) {\r\n                        _this.velX = -2.5;\r\n                        _this.flipX(false);\r\n                    } else if (_this.startX - _this.pos.x < 1200 || Math.random() < 0.1) {\r\n                        _this.velX = 2.5\r\n                        _this.flipX(true);\r\n                    }\r\n                    // vertical\r\n                    if (_this.pos.y > _this.startY) {\r\n                        _this.velY = -1;\r\n                    } else {\r\n                        _this.velY = 1;\r\n                    }\r\n                }, 3000);\r\n\r\n            },\r\n            /**\r\n             * manage the enemy movement\r\n             */\r\n            update: function (dt) {\r\n                if (this.velX < this.maxSpeed) {\r\n                    this.velX += .005\r\n                }\r\n                if (this.velY < this.maxSpeed) {\r\n                    this.velY += .005\r\n                }\r\n                this.pos.x += this.velX;\r\n                this.pos.y += this.velY;\r\n                // return true if we moved of if flickering\r\n                return (this._super(me.Container, \"update\", [dt]));\r\n            },\r\n            onDeactivateEvent: function () {\r\n                me.timer.clearInterval(this.timer);\r\n            },\r\n\r\n        });\r\n\r\n        game.SlimerEntity = me.Entity.extend({\r\n            /**\r\n             * constructor\r\n             */\r\n            init: function (x, y, settings) {\r\n\r\n                this.startX = x;\r\n                this.startY = y;\r\n\r\n                // call the super constructor\r\n                this._super(me.Entity, \"init\", [\r\n                    0, 0, settings\r\n                ]);\r\n                this.renderable = game.texture.createAnimationFromName([\r\n                    \"slimer-0\", \"slimer-1\", \"slimer-2\",\r\n                    \"slimer-3\"\r\n                ]);\r\n                this.anchorPoint.set(0.5, 0.5);\r\n                this.body.setMaxVelocity(2.5, 2.5);\r\n                this.body.ignoreGravity = true;\r\n\r\n                this.renderable.addAnimation(\"idle\", [0, 1], 300);\r\n                // this.renderable.addAnimation(\"shoot\", [4, 5], 100);\r\n                this.renderable.setCurrentAnimation(\"idle\");\r\n\r\n                // set a \"enemyObject\" type\r\n                this.body.collisionType = me.collision.types.ENEMY_OBJECT;\r\n\r\n                // don't update the entities when out of the viewport\r\n                this.alwaysUpdate = false;\r\n\r\n                this.isMovingEnemy = true;\r\n            },\r\n\r\n            /**\r\n             * manage the enemy movement\r\n             */\r\n            update: function (dt) {\r\n\r\n                // if (this.alive) {\r\n\r\n                // check & update movement\r\n                this.body.update(dt);\r\n\r\n                // }\r\n\r\n                // \r\n                this._super(me.Entity, \"update\", [dt]);\r\n                return true;\r\n            },\r\n\r\n            /**\r\n             * collision handle\r\n             */\r\n            onCollision: function (response) {\r\n                // res.y >0 means touched by something on the bottom\r\n                // which mean at top position for this one\r\n                if (this.alive && (response.overlapV.y > 0) && response.a.body.falling && !response.a.renderable.isFlickering()) {\r\n                    // make it dead\r\n                    this.alive = false;\r\n                    //stop shooting\r\n                    // me.timer.clearInterval(this.timer);\r\n                    //avoid further collision and delete it\r\n                    this.body.setCollisionMask(me.collision.types.NO_OBJECT);\r\n                    // set dead animation\r\n                    // this.renderable.setCurrentAnimation(\"dead\");\r\n                    // tint to red\r\n                    this.renderable.tint.setColor(255, 192, 192);\r\n                    // make it flicker and call destroy once timer finished\r\n                    var self = this;\r\n                    this.renderable.flicker(750, function () {\r\n                        me.game.world.removeChild(self);\r\n                    });\r\n                    // dead sfx\r\n                    // me.audio.play(\"enemykill\", false);\r\n                    // give some score\r\n                    // game.data.score += 150;\r\n                }\r\n\r\n                return false;\r\n            }\r\n\r\n        });\r\n\r\n        game.SlimerEntity.width = 128;\r\n        game.SlimerEntity.height = 128;\r\n    }\r\n    const extendedGame = await getMainPlayer()\r\n\r\n    return extendedGame\r\n}\r\nexport default mainPlayerMixin","const mainPlayerMixin = async (me, game) => {\r\n    const getMainPlayer = async () => {\r\n        game.ALLogo = me.Sprite.extend({\r\n            /**\r\n             * constructor\r\n             */\r\n            init: function (x, y, settings) {\r\n\r\n                // call the super constructor\r\n                this._super(me.Sprite, \"init\", [x, y, settings]);\r\n\r\n                this.addAnimation(\"idle\", [0]);\r\n                this.setCurrentAnimation(\"idle\");\r\n                //this.anchorPoint.set(-.6, -.3);\r\n\r\n                // don't update the entities when out of the viewport\r\n                this.alwaysUpdate = false;\r\n\r\n                this.isMovingEnemy = true;\r\n                this.ease();\r\n\r\n            },\r\n            ease: function () {\r\n                var _this = this;\r\n                // if (_this.onMouseOver){\r\n                //     _this.setCurrentAnimation(\"hover\")\r\n                // }\r\n            },\r\n\r\n            /**\r\n             * manage the enemy movement\r\n             */\r\n            update: function (dt) {\r\n\r\n\r\n                // return true if we moved of if flickering\r\n                return (this._super(me.Sprite, \"update\", [dt]));\r\n            },\r\n\r\n        });\r\n    }\r\n    const extendedGame = await getMainPlayer()\r\n\r\n    return extendedGame\r\n}\r\nexport default mainPlayerMixin","const mainPlayerMixin = async (me, game) => {\r\n    const getMainPlayer = async () => {\r\n        game.BradStartSprite = me.GUI_Object.extend({\r\n            /**\r\n             * constructor\r\n             */\r\n            init: function (x, y, settings) {\r\n\r\n                // call the super constructor\r\n                this._super(me.GUI_Object, \"init\", [x, y, settings]);\r\n\r\n                this.addAnimation(\"idle\", [0]);\r\n                this.addAnimation(\"hover\", [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], 100);\r\n                this.addAnimation(\"pause\", [{ name: 12, delay: Infinity }]);\r\n                this.addAnimation(\"emote\", [13]);\r\n                this.setCurrentAnimation(\"idle\");\r\n                //this.anchorPoint.set(-.6, -.3);\r\n\r\n\r\n            },\r\n            //** ADD TO title.js */\r\n            // arrow: function () {\r\n            //     let _this = this;\r\n            //     if (me.input.isKeyPressed(\"right\")) {\r\n            //         _this.setCurrentAnimation(\"hover\", \"emote\");\r\n            //     }\r\n            //     if (me.input.isKeyPressed(\"left\")) {\r\n            //         _this.setCurrentAnimation(\"idle\");\r\n            //     }\r\n            //     if (_this.isCurrentAnimation(\"emote\") && me.input.isKeyPressed(\"space\")) {\r\n            //         me.game.viewport.fadeIn(\"#202020\", 500, function () {\r\n            //             me.levelDirector.loadLevel(\"title_screen\");\r\n            //         });\r\n            //     }\r\n\r\n            // },\r\n\r\n            onOver: function (event) {\r\n                if (!this.isCurrentAnimation(\"emote\")) {\r\n                    this.setCurrentAnimation(\"hover\", \"pause\");\r\n                    me.input.triggerKeyEvent(me.input.KEY.LEFT, true);\r\n                }\r\n                return false;\r\n\r\n            },\r\n\r\n            onOut: function (event) {\r\n                if (!this.isCurrentAnimation(\"emote\")) {\r\n                    this.setCurrentAnimation(\"idle\");\r\n                }\r\n                return false;\r\n\r\n            },\r\n\r\n            onClick: function () {\r\n                var jim = me.game.world.getChildByName(\"jim_start_sprite\")[0];\r\n                if (this.isCurrentAnimation(\"hover\") || this.isCurrentAnimation(\"pause\")) {\r\n                    this.setCurrentAnimation(\"emote\");\r\n                    jim.setCurrentAnimation(\"idle\");\r\n\r\n                }\r\n                me.audio.play(\"cool_bloop\");\r\n\r\n                var startButton = me.game.world.getChildByName(\"start_text_sprite\")[0];\r\n                startButton.setOpacity(1);\r\n\r\n\r\n                return false;\r\n            },\r\n            /**\r\n             * manage the enemy movement\r\n             */\r\n            update: function (dt) {\r\n\r\n\r\n                // return true if we moved of if flickering\r\n                return (this._super(me.GUI_Object, \"update\", [dt]));\r\n            },\r\n\r\n        });\r\n    }\r\n    const extendedGame = await getMainPlayer()\r\n\r\n    return extendedGame\r\n}\r\nexport default mainPlayerMixin","const mainPlayerMixin = async (me, game) => {\r\n    const getMainPlayer = async () => {\r\n        game.JimStartSprite = me.GUI_Object.extend({\r\n            /**\r\n             * constructor\r\n             */\r\n            init: function (x, y, settings) {\r\n\r\n                // call the super constructor\r\n                this._super(me.GUI_Object, \"init\", [x, y, settings]);\r\n\r\n                this.addAnimation(\"idle\", [0]);\r\n                this.addAnimation(\"hover\", [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], 100);\r\n                this.addAnimation(\"pause\", [{ name: 12, delay: Infinity }]);\r\n                this.addAnimation(\"emote\", [13]);\r\n                this.setCurrentAnimation(\"idle\");\r\n                //this.anchorPoint.set(-.6, -.3);\r\n\r\n            },\r\n            onOver: function (event) {\r\n                if (!this.isCurrentAnimation(\"emote\")) {\r\n                    this.setCurrentAnimation(\"hover\", \"pause\");\r\n                    me.input.triggerKeyEvent(me.input.KEY.LEFT, true);\r\n                }\r\n                return false;\r\n\r\n            },\r\n\r\n            onOut: function (event) {\r\n                if (!this.isCurrentAnimation(\"emote\")) {\r\n                    this.setCurrentAnimation(\"idle\");\r\n                }\r\n                return false;\r\n\r\n            },\r\n\r\n            onClick: function () {\r\n                var brad = me.game.world.getChildByName(\"brad_start_sprite\")[0];\r\n                if (this.isCurrentAnimation(\"hover\") || this.isCurrentAnimation(\"pause\")) {\r\n                    this.setCurrentAnimation(\"emote\");\r\n                    brad.setCurrentAnimation(\"idle\");\r\n\r\n                }\r\n                me.audio.play(\"cool_bloop\");\r\n\r\n                var startButton = me.game.world.getChildByName(\"start_text_sprite\")[0]\r\n                startButton.setOpacity(1);\r\n\r\n                return false;\r\n            },\r\n\r\n            /**\r\n             * manage the enemy movement\r\n             */\r\n            update: function (dt) {\r\n\r\n\r\n                // return true if we moved of if flickering\r\n                return (this._super(me.GUI_Object, \"update\", [dt]));\r\n            },\r\n\r\n        });\r\n    }\r\n    const extendedGame = await getMainPlayer()\r\n\r\n    return extendedGame\r\n}\r\nexport default mainPlayerMixin","const mainPlayerMixin = async (me, game) => {\r\n    const getMainPlayer = async () => {\r\n        game.LoadingSprite = me.GUI_Object.extend({\r\n            /**\r\n             * constructor\r\n             */\r\n            init: function (x, y, settings) {\r\n\r\n                // call the super constructor\r\n                this._super(me.Sprite, \"init\", [x, y, settings]);\r\n\r\n                this.addAnimation(\"loading\", [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 15, 16, 15, 17, 18, 19, 20, 21, 22, 23, 24, 23, 24], 200);\r\n                this.addAnimation(\"fade\", [{ name: 24, delay: Infinity }]);\r\n                let _this = this\r\n                this.setCurrentAnimation(\"loading\", function () {\r\n\r\n                    _this.setCurrentAnimation(\"fade\");\r\n                    _this.fade();\r\n                });\r\n\r\n\r\n            },\r\n            fade: function () {\r\n                me.game.viewport.fadeIn(\"#202020\", 500, function () {\r\n                    me.levelDirector.loadLevel(\"title_screen\");\r\n                });\r\n\r\n            },\r\n\r\n\r\n\r\n            /**\r\n             * manage the enemy movement\r\n             */\r\n            update: function (dt) {\r\n\r\n                // return true if we moved of if flickering\r\n                return (this._super(me.Sprite, \"update\", [dt]));\r\n            },\r\n\r\n        });\r\n    }\r\n    const extendedGame = await getMainPlayer()\r\n\r\n    return extendedGame\r\n}\r\nexport default mainPlayerMixin","const mainPlayerMixin = async (me, game) => {\r\n    const getMainPlayer = async () => {\r\n        game.StartTextSprite = me.GUI_Object.extend({\r\n            /**\r\n             * constructor\r\n             */\r\n            init: function (x, y, settings) {\r\n\r\n                // call the super constructor\r\n                this._super(me.GUI_Object, \"init\", [x, y, settings]);\r\n\r\n                this.addAnimation(\"appear\", [0, 1], 200);\r\n                this.addAnimation(\"click\", [1]);\r\n                //this.anchorPoint.set(-.6, -.3);\r\n\r\n                // don't update the entities when out of the viewport\r\n                this.alwaysUpdate = false;\r\n\r\n                this.setOpacity(0)\r\n\r\n\r\n\r\n            },\r\n            onOver: function () {\r\n                this.setCurrentAnimation(\"click\")\r\n            },\r\n            onOut: function () {\r\n                this.setCurrentAnimation(\"appear\")\r\n            },\r\n\r\n\r\n            ///////**ADD TO title.js */\r\n            // start: function(){\r\n            //     let _this = this\r\n            //     if (me.input.isKeyPressed(\"space\") && _this.isOpacity(1)){\r\n            //     _this.setCurrentAnimation(\"click\")\r\n            //     }\r\n\r\n            // },\r\n\r\n\r\n\r\n            /**\r\n             * manage the enemy movement\r\n             */\r\n            update: function (dt) {\r\n\r\n\r\n                // return true if we moved of if flickering\r\n                return (this._super(me.GUI_Object, \"update\", [dt]));\r\n            },\r\n\r\n        });\r\n    }\r\n    const extendedGame = await getMainPlayer()\r\n\r\n    return extendedGame\r\n}\r\nexport default mainPlayerMixin","\nimport './App.css';\nimport gameMixin from './mixins/game'\nimport playMixin from './mixins/play'\nimport cubeProjectileMixin from './mixins/entities/cubeProjectile'\nimport boostEntityMixin from './mixins/entities/boostEntity'\nimport boostTileMixin from './mixins/entities/boostTile'\nimport carlMixin from './mixins/entities/carl'\nimport cassetteProjectileMixin from './mixins/entities/cassetteProjectile'\nimport gremlinMixin from './mixins/entities/gremlin'\nimport HUDMixin from './mixins/entities/HUD'\nimport pacManMixin from './mixins/entities/pacMan'\nimport protonBeamMixin from './mixins/entities/protonBeam'\nimport playerMixin from './mixins/entities/player'\nimport skeletorMixin from './mixins/entities/skeletor'\nimport simonMixin from './mixins/entities/simon'\nimport warpEntityMixin from './mixins/entities/warpEntity'\nimport slimerMixin from './mixins/entities/slimer'\nimport logoMixin from './mixins/sprites/al_logo'\nimport bradMixin from './mixins/sprites/brad_start_sprite'\nimport jimMixin from './mixins/sprites/jim_start_sprite'\nimport loadingMixin from './mixins/sprites/loading_sprite'\nimport startTextMixin from './mixins/sprites/start_text_sprite'\nimport { useEffect } from 'react';\n\nfunction App() {\n  let me = window.me\n  useEffect(async () => {\n    const game = await gameMixin(me)\n    await playMixin(me, game)\n    await playerMixin(me, game)\n    await cubeProjectileMixin(me, game)\n    await boostEntityMixin(me, game)\n    await boostTileMixin(me, game)\n    await carlMixin(me, game)\n    await cassetteProjectileMixin(me, game)\n    await gremlinMixin(me, game)\n    await HUDMixin(me, game)\n    await pacManMixin(me, game)\n    await protonBeamMixin(me, game)\n    await skeletorMixin(me, game)\n    await simonMixin(me, game)\n    await warpEntityMixin(me, game)\n    await slimerMixin(me, game)\n\n    await logoMixin(me, game)\n    await bradMixin(me, game)\n    await jimMixin(me, game)\n    await loadingMixin(me, game)\n    await startTextMixin(me, game)\n\n    if (game.onload) {\n      window.me.device.onReady(() => {\n        game.onload();\n      });\n    }\n  }, [me])\n  return (\n    <div className=\"App\">\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}